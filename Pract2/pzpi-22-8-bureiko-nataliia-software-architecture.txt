Міністерство освіти і науки України
Харківський національний університет радіоелектроніки





Кафедра програмної інженерії




ЗВІТ
 з практичної роботи №2
з дисципліни «Архітектура програмного забезпечення»
на тему «Архітектура програмної системи Spotify»





Виконала:                                                                      Перевірив:
студ. гр. ПЗПІ-22-8                                                       ст. викл. каф. ПІ 
Бурейко Н. М.                                                                Сокорчук І. П.





Харків 2025
1 ІСТОРІЯ ЗМІН
     
     
          У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.1.
          
          Таблиця 1.1 – Історія змін
№ДатаВерсія звітуОпис змін та виправлень122.05.20250.1Створено титульну сторінку223.05.20250.1Створено розділ «Завдання»323.05.20250.1Створено розділ «Опис виконаної роботи»423.05.20250.1Створено розділ «Висновки»523.05.20250.1Додано посилання на відеозапис та його хронологічний опис до додатку А623.05.20250.1Додано слайди презентації до додатку Б723.05.20250.1Додано програмний код до додатку В
     











2 ЗАВДАННЯ


     Під час виконання практичної роботи №2 ставиться завдання дослідити архітектуру сучасної програмної системи Spotify. Основною метою є проаналізувати її структуру, принципи масштабування, використані технології та обґрунтувати вибір архітектурного стилю. 
     У процесі роботи необхідно дослідити основні компоненти системи.
     Завдання зосереджене на побудові цілісного уявлення про архітектуру Spotify, виявленні переваг архітектури, аналізі складових системи та підготовці структурованої презентації.

          
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
3 ОПИС ВИКОНАНОЇ РОБОТИ


     У ході практичного заняття було проаналізовано архітектуру програмної системи Spotify як приклад масштабованої хмарної платформи з високим навантаженням. Розглядалася структура системи, яка базується на мікросервісній архітектурі, що дозволяє незалежно масштабувати окремі компоненти та спрощує обробку запитів.
     З’ясовано, що кожен мікросервіс виконує вузькоспеціалізовану задачу: керування каталогом музики, обробка пошуку, авторизація, рекомендації, доставка аудіо. Було детально досліджено, як ці сервіси взаємодіють через API, і як завдяки цьому досягається стійкість системи до помилок.
     Досліджено архітектуру клієнтських застосунків і взаємодію з бекендом. Окрему увагу приділено сервісу відтворення та рекомендаційній системі, яка використовує алгоритми машинного навчання для аналізу поведінки користувача й персоналізованих добірок.
     Було створено презентацію (слайди розміщені у додатку Б), яка містить огляд архітектурних рішень Spotify, опис взаємодії компонентів та технологій і приклади коду для демонстрації обробки подій у Kafka та виклику одного мікросервісу через gRPC (на Java) (див. додаток В). У результаті закріплено розуміння сучасної архітектури програмної системи Spotify.









4 ВИСНОВКИ
     
     
     Під час виконання практичної роботи було досліджено архітектуру програмної системи Spotify, її основні компоненти та підходи до забезпечення масштабованості й стійкості до збоїв. Проаналізовано технології, що лежать в основі роботи системи, а також методи обробки даних у реальному часі та формування персоналізованого досвіду.
     Було створено презентацію, яка демонструє глибоке розуміння архітектурного підходу Spotify та його реалізацію. Відеозапис захисту презентації доступний за посиланням у додатку А.
     
     
     
     

     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК А
     Відеозапис доповіді на YouTube: https://youtu.be/1Cpky66i0pw 
     
     
     Зміст:
     00:00 - вступ;
     00:38 - що таке Spotify;
     01:18 - основні можливості;
     01:39 - архітектурні виклики Spotify;
     02:26 - загальна архітектура;
     03:51 - архітектура клієнт-сервер;
     04:34 - технологічний стек;
     05:38 - рекомендаційна система;
     06:18 - сервіс відтворення;
     06:55 - взаємодія між мікросервісами;
     08:03 - DevOps-практики у Spotify;
     09:04 - висновки та завершення доповіді.
     


     
     
     
     
     
     
     
     
     
     
ДОДАТОК Б
Презентація



Рисунок А.1   Титульний слайд


Рисунок А.2   Зміст

Рисунок А.3   Загальне ознайомлення з програмною системою Spotify


Рисунок А.4   Основні можливості


Рисунок А.5   Архітектурні виклики


Рисунок А.6   Загальна архітектура


Рисунок А.7   Архітектура клієнт-сервер


Рисунок А.8   Технологічний стек

	
Рисунок А.9   Рекомендаційна система


Рисунок А.10   Сервіс відтворення

	
Рисунок А.11   Взаємодія між мікросервісами


Рисунок А.12   DevOps-практики у Spotify

Рисунок А.13   Висновки


Рисунок А.14   Подяка за увагу


Рисунок А.15   Джерела

















ДОДАТОК В
Код
     
     
  1 //Приклад виклику одного мікросервісу через gRPC (Java)
  2 ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
  3                                               .usePlaintext()
  4                                               .build();
  5
  6 MusicServiceGrpc.MusicServiceBlockingStub stub = MusicServiceGrpc.newBlockingStub(channel);
  7
  8 PlayRequest request = PlayRequest.newBuilder().setTrackId("12345").build();
  9 PlayResponse response = stub.playTrack(request);
 10
 11 System.out.println("Відтворюється: " + response.getStatus());
 12 channel.shutdown();
     
  1 # Приклад обробки подій через Kafka (Python)
  2 from kafka import KafkaConsumer
  3
  4 consumer = KafkaConsumer(
  5     'user-activity',
  6     bootstrap_servers=['kafka-broker1:9092', 'kafka-broker2:9092'],
  7     group_id='recommendation-service',
  8     auto_offset_reset='earliest'
  9 )
 10
 11 for message in consumer:
 12     user_event = message.value
 13     print(f"Обробка події користувача: {user_event}")
 14     # Логіка оновлення рекомендацій
     


